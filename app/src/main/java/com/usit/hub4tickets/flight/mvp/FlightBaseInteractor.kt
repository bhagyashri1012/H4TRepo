package com.usit.hub4tickets.loginimport com.usit.hub4tickets.api.network.ErrorResponseimport com.usit.hub4tickets.domain.api.APICallManagerimport com.usit.hub4tickets.domain.api.AirportDataAPICallListenerimport com.usit.hub4tickets.utils.Enumsimport com.usit.hub4tickets.utils.presentation.presenters.BaseInteractorimport io.reactivex.android.schedulers.AndroidSchedulersimport io.reactivex.schedulers.Schedulers/** * Created by Bhagyashri Burade * Date: 24/10/2018 * Email: bhagyashri.burade@usit.net.in */class FlightBaseInteractor(private var listenerAirportDataAPICallListener: AirportDataAPICallListener) :    BaseInteractor {    fun callAPIAirportData(flag: String?, filterValue: String) {        val route = Enums.APIRoute.GET_SAMPLE        val call = APICallManager.getInstance.apiManager.getAirportData()            .subscribeOn(Schedulers.io())            .observeOn(AndroidSchedulers.mainThread())        call.subscribe(            { response ->                listenerAirportDataAPICallListener.onAPICallSucceed(route, response, flag)            },            { error ->                listenerAirportDataAPICallListener.onAPICallFailed(route, ErrorResponse.parseError(error)!!)            })    }    fun callAPIFlightDetails(        userId: String,        deviceId: String,        adults: String,        cabinClass: String,        children: String,        dateFrom: String,        flightType: String,        flyFrom: String,        flyTo: String,        infants: String,        locale: String,        returnFrom: String,        curr:String,        price_from: String,        price_to: String,        dtime_from: String,        dtime_to: String,        atime_from: String,        atime_to: String,        max_stopovers: String    ) {        val route = Enums.APIRoute.GET_SAMPLE        val call = APICallManager.getInstance.apiManager.getFlightDetails(            userId,            deviceId,            adults,            cabinClass,            children,            dateFrom,            flightType,            flyFrom,            flyTo,            infants,            locale,            returnFrom,            curr,            price_from,            price_to,            dtime_from,            dtime_to,            atime_from,            atime_to,            max_stopovers        )            .subscribeOn(Schedulers.io())            .observeOn(AndroidSchedulers.mainThread())        call.subscribe(            { response ->                listenerAirportDataAPICallListener.onAPICallFlightDetailsSucceed(route, response)            },            { error ->                listenerAirportDataAPICallListener.onAPICallFailed(route, ErrorResponse.parseError(error)!!)            })    }}