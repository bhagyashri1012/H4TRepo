package com.usit.hub4tickets.flight.uiimport android.os.Bundleimport android.os.Handlerimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.TextViewimport com.crystal.crystalrangeseekbar.interfaces.OnRangeSeekbarChangeListenerimport com.crystal.crystalrangeseekbar.interfaces.OnRangeSeekbarFinalValueListenerimport com.crystal.crystalrangeseekbar.widgets.CrystalRangeSeekbarimport com.usit.hub4tickets.Rimport kotlinx.android.synthetic.main.common_toolbar.*import kotlinx.android.synthetic.main.fragment_filter.*/** * Created by Bhagyashri Burade * Date: 14/01/2019 * Email: bhagyashri.burade@usit.net.in */class FilterFragment : RootDialogFragment() {    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        arguments?.let {        }    }    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_filter, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)            activity?.titleToolBar?.text = resources.getString(R.string.filter)        activity?.mainToolbar?.setNavigationOnClickListener { onBackPressed() }        setRangeSeekbarForPrice()        setRangeSeekbarForDuration()        setRangeSeekbarForaOutstanding()    }    companion object {        @JvmStatic        fun newInstance(param1: String, param2: String) =            FilterFragment().apply {                arguments = Bundle().apply {                }            }    }    private fun setRangeSeekbarForDuration() {        // set listener        range_seekbar.setOnRangeSeekbarChangeListener { minValue, maxValue ->            textMin.text = minValue.toString()            textMax.text = maxValue.toString()        }        // set final value listener        range_seekbar.setOnRangeSeekbarFinalValueListener { minValue, maxValue ->            Log.d(                "CRS=>",                minValue.toString() + " : " + maxValue.toString()            )        }//        Handler().postDelayed({//            range_seekbar.setMinValue(0f).setMaxValue(30f).setMinStartValue(7f).setMaxStartValue(10f).apply()//        }, 5000)    }private fun setRangeSeekbarForPrice() {        // set listener        range_seekbar_price.setOnRangeSeekbarChangeListener { minValue, maxValue ->            textMin_price.text = minValue.toString()            textMax_price.text = maxValue.toString()        }        // set final value listener    range_seekbar_price.setOnRangeSeekbarFinalValueListener { minValue, maxValue ->            Log.d(                "CRS=>",                minValue.toString() + " : " + maxValue.toString()            )        }//        Handler().postDelayed({//            range_seekbar_price.setMinValue(6f).setMaxValue(10f).setMinStartValue(2f).setMaxStartValue(10f).apply()//        }, 5000)    }private fun setRangeSeekbarForaOutstanding() {        // set listener    range_seekbar_outbound_trip.setOnRangeSeekbarChangeListener { minValue, maxValue ->            textMin_outbound.text = minValue.toString()            textMax_outbound.text = maxValue.toString()        }        // set final value listener    range_seekbar_outbound_trip.setOnRangeSeekbarFinalValueListener { minValue, maxValue ->            Log.d(                "CRS=>",                minValue.toString() + " : " + maxValue.toString()            )        }//        Handler().postDelayed({//            range_seekbar_outbound_trip.setMinValue(1f).setMaxValue(10f).setMinStartValue(2f).setMaxStartValue(10f).apply()//        }, 5000)    }    override fun onBackPressed(): Boolean {        return fragmentManager?.popBackStackImmediate()!!    }}