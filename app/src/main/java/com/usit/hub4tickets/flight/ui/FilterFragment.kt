package com.usit.hub4tickets.flight.uiimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport com.usit.hub4tickets.flight.Utilsimport com.usit.hub4tickets.flight.model.FilterModelimport com.usit.hub4tickets.utils.Constantimport kotlinx.android.synthetic.main.common_toolbar.*import kotlinx.android.synthetic.main.fragment_filter.*/** * Created by Bhagyashri Burade * Date: 14/01/2019 * Email: bhagyashri.burade@usit.net.in */class FilterFragment : RootDialogFragment() {    //private var maxStopovers: String = ""    private var minValuePrice: String = "0"    private var maxValuePrice: String = "100000"    private var minValueDuration: String = "0"    private var maxValueDuration: String = "0"    private var minValueOutbound: String = "0"    private var maxValueOutbound: String = "0"    var filterData: FilterModel.Filter? = null    private var activityTitle: String=""    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        arguments?.let {            filterData = it?.get(Constant.Path.FILTER_DATA) as FilterModel.Filter?            activityTitle = it?.get(Constant.Path.ACTIVITY_TITLE) as String        }    }    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        return inflater.inflate(com.usit.hub4tickets.R.layout.fragment_filter, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        setToolBar()        setOtherListeners()        if (filterData != null) {            init()        }        setRangeSeekbarForPrice()        setRangeSeekbarForDuration()        setRangeSeekbarForaOutstanding()    }    private fun init() {        textMin_price.text = filterData?.price_from        textMax_price.text = filterData?.price_to        minValuePrice = filterData?.price_from.toString()        maxValuePrice = filterData?.price_to.toString()        range_seekbar_price.setMinValue(0f).setMaxValue(100000f).setMinStartValue(minValuePrice.toFloat())            .setMaxStartValue(maxValuePrice.toFloat()).apply()        if (arguments?.get(Constant.Path.ACTIVITY_TITLE)?.equals("FragmentOneWay")!!) {            ll_inbound.visibility = View.GONE        } else {            ll_inbound.visibility = View.VISIBLE            textMin.text = removePadValues(nullDefaultValues(filterData?.dtime_from, "0"))            textMax.text = removePadValues(nullDefaultValues(filterData?.dtime_to, "24"))            minValueDuration = removePadValues(filterData?.dtime_from.toString())            maxValueDuration = removePadValues(filterData?.dtime_to.toString())            range_seekbar_duration.setMinValue(1f).setMaxValue(24f)                .setMinStartValue(minValueDuration.toFloat())                .setMaxStartValue(zeroCheck(maxValueDuration).toFloat())                .apply()        }        textMin_outbound.text = removePadValues(nullDefaultValues(filterData?.atime_from, "0"))        textMax_outbound.text = removePadValues(nullDefaultValues(filterData?.atime_to, "24"))        minValueOutbound = removePadValues(filterData?.atime_from.toString())        maxValueOutbound = removePadValues(filterData?.atime_to.toString())        range_seekbar_outbound_trip.setMinValue(1f).setMaxValue(24f)            .setMinStartValue(minValueOutbound.toFloat())            .setMaxStartValue(zeroCheck(maxValueOutbound).toFloat())            .apply()        switchButton_direct.isChecked = filterData?.max_stopovers?.contains(1)!!        switchButton_1stop.isChecked = filterData?.max_stopovers?.contains(2)!!        switchButton_2stops.isChecked = filterData?.max_stopovers?.contains(3)!!    }    private fun zeroCheck(maxDuration: String): String {        if (maxDuration == "0:00")            return "24"        else if (maxDuration == "0")            return "24"        else if (maxDuration == "00:00")            return "24"        else if (maxDuration == "00")            return "24"        else            return maxDuration    }    private fun nullDefaultValues(bundleData: String?, defaultValue: String): String {        if (bundleData.equals("00:00"))            return defaultValue        else            return bundleData.toString()    }    private fun removePadValues(value: String): String {        if (null != value) {            value.contains(":00")            return value.removeSuffix(":00")        } else            return value    }    private fun setOtherListeners() {        var maxStopovers: ArrayList<Int> = ArrayList()        button_dialog_cancel.setOnClickListener { onBackPressed() }        if (switchButton_direct.isChecked)            maxStopovers.add(1)        if (switchButton_1stop.isChecked)            maxStopovers.add(2)        if (switchButton_2stops.isChecked)            maxStopovers.add(3)        switchButton_direct?.setOnCheckedChangeListener { _, isChecked ->            if (isChecked)                maxStopovers.add(1)            else {                if (!switchButton_1stop.isChecked && !switchButton_2stops.isChecked) {                    switchButton_direct.isChecked = true                    maxStopovers.add(1)                } else                    maxStopovers.remove(1)            }        }        switchButton_1stop?.setOnCheckedChangeListener { _, isChecked ->            if (isChecked)                maxStopovers.add(2)            else {                if (!switchButton_direct.isChecked && !switchButton_2stops.isChecked) {                    switchButton_1stop.isChecked = true                    maxStopovers.add(2)                } else                    maxStopovers.remove(2)            }        }        switchButton_2stops?.setOnCheckedChangeListener { _, isChecked ->            if (isChecked)                maxStopovers.add(3)            else {                if (!switchButton_direct.isChecked && !switchButton_1stop.isChecked) {                    switchButton_2stops.isChecked = true                    maxStopovers.add(3)                } else                    maxStopovers.remove(3)            }        }                if(activityTitle.equals("OneWay")) {            button_dialog_apply.setOnClickListener {                val filterModel: FilterModel.Filter = FilterModel.Filter(                    minValuePrice,                    maxValuePrice,                    minValueDuration + ":00".padEnd(2),                    maxValueDuration + ":00".padEnd(2),                    minValueOutbound + ":00".padEnd(2),                    maxValueOutbound + ":00".padEnd(2),                    maxStopovers                )                if (Utils.notifier != null) {                    Utils.notifier!!.notify(filterModel)                }                onBackPressed()            }        }    }    private fun setToolBar() {        activity?.titleToolBar?.text = resources.getString(com.usit.hub4tickets.R.string.filter)        activity?.mainToolbar?.setNavigationOnClickListener { onBackPressed() }    }    private fun setRangeSeekbarForDuration() {        range_seekbar_duration.setOnRangeSeekbarChangeListener { minValue, maxValue ->            textMin.text = minValue.toString()            textMax.text = maxValue.toString()        }        range_seekbar_duration.setOnRangeSeekbarFinalValueListener { minValue, maxValue ->            Log.d(                "CRS=>",                minValue.toString() + " : " + maxValue.toString()            )            minValueDuration = minValue.toString()            maxValueDuration = maxValue.toString()        }    }    private fun setRangeSeekbarForPrice() {        range_seekbar_price.setOnRangeSeekbarChangeListener { minValue, maxValue ->            textMin_price.text = minValue.toString()            textMax_price.text = maxValue.toString()        }        // set final value listener        range_seekbar_price.setOnRangeSeekbarFinalValueListener { minValue, maxValue ->            Log.d(                "CRS=>",                minValue.toString() + " : " + maxValue.toString()            )            minValuePrice = minValue.toString()            maxValuePrice = maxValue.toString()        }    }    private fun setRangeSeekbarForaOutstanding() {        range_seekbar_outbound_trip.setOnRangeSeekbarChangeListener { minValue, maxValue ->            textMin_outbound.text = minValue.toString()            textMax_outbound.text = maxValue.toString()        }        range_seekbar_outbound_trip.setOnRangeSeekbarFinalValueListener { minValue, maxValue ->            Log.d(                "CRS=>",                minValue.toString() + " : " + maxValue.toString()            )            minValueOutbound = minValue.toString()            maxValueOutbound = maxValue.toString()        }    }    var flag: Int = 0    override fun onBackPressed(): Boolean {        if (flag == 0) {            if (null != fragmentManager) {                flag++                fragmentManager?.beginTransaction()?.remove(this)?.addToBackStack(null)?.commit()                return true            } else                return fragmentManager?.popBackStackImmediate()!!        } else {            activity?.finish()            return true        }        /*return fragmentManager?.popBackStackImmediate()!!        else            activity?.finish()        return true*/    }}