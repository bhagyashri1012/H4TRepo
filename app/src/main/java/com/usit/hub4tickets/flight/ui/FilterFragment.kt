package com.usit.hub4tickets.flight.uiimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport com.usit.hub4tickets.flight.Utilsimport com.usit.hub4tickets.flight.model.FilterModelimport com.usit.hub4tickets.utils.Constantimport kotlinx.android.synthetic.main.common_toolbar.*import kotlinx.android.synthetic.main.fragment_filter.*/** * Created by Bhagyashri Burade * Date: 14/01/2019 * Email: bhagyashri.burade@usit.net.in */class FilterFragment : RootDialogFragment() {    private var maxStopovers: String = "0"    private var minValuePrice: String = "1000"    private var maxValuePrice: String = "10000"    private var minValueDuration: String = "1"    private var maxValueDuration: String = "10"    private var minValueOutbound: String = "1"    private var maxValueOutbound: String = "10"    var filterData: FilterModel.Filter? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        arguments?.let {            filterData = it?.get(Constant.Path.FILTER_DATA) as FilterModel.Filter?        }    }    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        return inflater.inflate(com.usit.hub4tickets.R.layout.fragment_filter, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        setToolBar()        setOtherListeners()        if (filterData != null) {            init()        }            setRangeSeekbarForPrice()            setRangeSeekbarForDuration()            setRangeSeekbarForaOutstanding()    }    private fun init() {        textMin_price.text = filterData?.price_from        textMax_price.text = filterData?.price_to        minValuePrice=filterData?.price_from.toString()        maxValuePrice=filterData?.price_to.toString()        range_seekbar_price.setMinValue(1000f).setMaxValue(10000f).setMinStartValue(filterData?.price_from?.toFloat()!!).setMaxStartValue(filterData?.price_to?.toFloat()!!).apply()        textMin.text = filterData?.dtime_from        textMax.text = filterData?.dtime_to        minValueDuration=filterData?.dtime_from.toString()        maxValueDuration=filterData?.dtime_to.toString()        range_seekbar_duration.setMinValue(1f).setMaxValue(10f).setMinStartValue(filterData?.dtime_from?.toFloat()!!).setMaxStartValue(filterData?.dtime_to?.toFloat()!!).apply()        textMin_outbound.text = filterData?.atime_from        textMax_outbound.text = filterData?.atime_to        minValueOutbound=filterData?.atime_from.toString()        maxValueOutbound=filterData?.atime_to.toString()        range_seekbar_outbound_trip.setMinValue(1f).setMaxValue(10f).setMinStartValue(filterData?.atime_from?.toFloat()!!).setMaxStartValue(filterData?.atime_to?.toFloat()!!).apply()        switchButton_direct.isChecked = filterData?.max_stopovers.equals("0")        switchButton_1stop.isChecked=filterData?.max_stopovers.equals("1")        switchButton_2stops.isChecked=filterData?.max_stopovers.equals("2")    }    private fun setOtherListeners() {        button_dialog_cancel.setOnClickListener { onBackPressed() }        switchButton_direct?.setOnCheckedChangeListener { _, isChecked ->            if (isChecked)                maxStopovers = "0"        }        switchButton_1stop?.setOnCheckedChangeListener { _, isChecked ->            if (isChecked)                maxStopovers = "1"        }        switchButton_2stops?.setOnCheckedChangeListener { _, isChecked ->            if (isChecked)                maxStopovers = "2"        }        button_dialog_apply.setOnClickListener {            val filterModel = FilterModel.Filter(                minValuePrice, maxValuePrice, minValueDuration, maxValueDuration,                minValueOutbound, maxValueOutbound, maxStopovers            )            if (Utils.notifier != null) {                Utils.notifier!!.notify(filterModel)            }            onBackPressed()        }    }    private fun setToolBar() {        activity?.titleToolBar?.text = resources.getString(com.usit.hub4tickets.R.string.filter)        activity?.mainToolbar?.setNavigationOnClickListener { onBackPressed() }    }    private fun setRangeSeekbarForDuration() {        range_seekbar_duration.setOnRangeSeekbarChangeListener { minValue, maxValue ->            textMin.text = minValue.toString()            textMax.text = maxValue.toString()        }        range_seekbar_duration.setOnRangeSeekbarFinalValueListener { minValue, maxValue ->            Log.d(                "CRS=>",                minValue.toString() + " : " + maxValue.toString()            )            minValueDuration = minValue.toString()            maxValueDuration = maxValue.toString()        }    }    private fun setRangeSeekbarForPrice() {      range_seekbar_price.setOnRangeSeekbarChangeListener { minValue, maxValue ->            textMin_price.text = minValue.toString()            textMax_price.text = maxValue.toString()        }        // set final value listener        range_seekbar_price.setOnRangeSeekbarFinalValueListener { minValue, maxValue ->            Log.d(                "CRS=>",                minValue.toString() + " : " + maxValue.toString()            )            minValuePrice = minValue.toString()            maxValuePrice = maxValue.toString()        }    }    private fun setRangeSeekbarForaOutstanding() {        range_seekbar_outbound_trip.setOnRangeSeekbarChangeListener { minValue, maxValue ->            textMin_outbound.text = minValue.toString()            textMax_outbound.text = maxValue.toString()        }        range_seekbar_outbound_trip.setOnRangeSeekbarFinalValueListener { minValue, maxValue ->            Log.d(                "CRS=>",                minValue.toString() + " : " + maxValue.toString()            )            minValueOutbound = minValue.toString()            maxValueOutbound = maxValue.toString()        }    }    override fun onBackPressed(): Boolean {        return fragmentManager?.popBackStackImmediate()!!    }}