package com.usit.hub4tickets.flight.uiimport android.app.Activityimport android.app.DatePickerDialogimport android.content.Intentimport android.os.Bundleimport android.support.v7.app.AlertDialogimport android.support.v7.widget.LinearLayoutManagerimport android.text.TextUtilsimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.EditTextimport android.widget.TextViewimport com.usit.hub4tickets.MainApplicationimport com.usit.hub4tickets.Rimport com.usit.hub4tickets.common.RootFragmentimport com.usit.hub4tickets.domain.presentation.presenters.FlightPresenterimport com.usit.hub4tickets.domain.presentation.screens.main.FlightPresenterImplimport com.usit.hub4tickets.flight.adapter.VerticalRecyclerViewAdapterimport com.usit.hub4tickets.flight.model.FlightViewModelimport com.usit.hub4tickets.search.FlightSearchActivityimport com.usit.hub4tickets.search.model.CommonSelectorPojoimport com.usit.hub4tickets.utils.*import com.usit.hub4tickets.utils.view.dialog.CustomDialogPresenterimport kotlinx.android.synthetic.main.fragment_multicity.*import kotlinx.android.synthetic.main.search_layout.*import kotlinx.android.synthetic.main.sort_by_dialog.view.*import java.text.SimpleDateFormatimport java.util.*class FragmentMultiCity : RootFragment(), FlightPresenter.MainView,    VerticalRecyclerViewAdapter.MyClickListener {    private var isItemClicked: Boolean = false    private var isItemClickedTo: Boolean = false    private var fromCode: String? = null    private var toCode: String? = null    private var travelClassCode: String? = "ECONOMY"    private var travelClass: String? = "Economy"    private val FROM_SELECTION_REQUEST = 501    private val TO_SELECTION_REQUEST = 502    private lateinit var model: FlightViewModel    private lateinit var presenter: FlightPresenter    private var totalPassengers: String = ""    var verticalRecyclerViewAdapter: VerticalRecyclerViewAdapter? = null    override fun doRetrieveModel(): FlightViewModel = this.model    override fun showState(viewState: FlightPresenter.MainView.ViewState) {        when (viewState) {            FlightPresenter.MainView.ViewState.IDLE -> {                Utility.showProgress(false, context)            }            FlightPresenter.MainView.ViewState.LOADING -> {                Utility.showProgress(true, context)            }            FlightPresenter.MainView.ViewState.MULTICITY_DETAILS_SUCCESS -> {                showList(model.multiCityListViewModel)            }            FlightPresenter.MainView.ViewState.FLIGHT_NOT_FOUND            -> {                Utility.showCustomDialog(context, model.multiCityListViewModel.message, "", null)            }            FlightPresenter.MainView.ViewState.ERROR            -> {                Utility.showCustomDialog(context, doRetrieveModel().errorMessage.message, "", null)            }        }    }    private fun showList(        responseData: FlightViewModel.MultiCityResponse    ) {        totalPassengers =            Utility.showPassengersAdult(adults).toString() + Utility.showPassengersChildren(children).toString() +                    Utility.showPassengersInfants(infants).toString()        val intent = Intent(context, MulticitySearchListActivity::class.java)        intent.putExtra(Constant.Path.MULTICITY_DETAILS, responseData)        intent.putExtra(Constant.Path.TOTAL_PASSENGERS, totalPassengers)        intent.putExtra(Constant.Path.CABIN_CLASS, travelClass)        intent.putExtra(Constant.Path.CABIN_CLASS_CODE, travelClassCode)        startActivity(intent)    }    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {        return inflater.inflate(R.layout.fragment_multicity, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        recycler_view.layoutManager = LinearLayoutManager(activity)        verticalRecyclerViewAdapter = VerticalRecyclerViewAdapter(getDataSet(), this)        recycler_view.adapter = verticalRecyclerViewAdapter        init()        setDataAndListeners(view)    }    private fun getDataSet(): ArrayList<FlightViewModel.MultiCitiesForSearch> {        var results = ArrayList<FlightViewModel.MultiCitiesForSearch>()        for (index in 0..1) {            Pref.setValue(context, "FL_FROM", " " + "@" + index)            Pref.setValue(context, "FL_TO", " " + "@" + index)            val obj = FlightViewModel.MultiCitiesForSearch(                Utility.getCurrentDateNow(),                "",                " "            )            Log.d("getDataset-", "$index")            results.add(index, obj)        }        return results    }    override fun onMinusClick(position: Int, holder: VerticalRecyclerViewAdapter.DataObjectHolder) {        if (verticalRecyclerViewAdapter?.itemCount in 2..6) {            Log.d(                "position - ",                position.toString() + " itemCount- " + verticalRecyclerViewAdapter?.itemCount + " size-" + getDataSet().size            )            if (position in 0..6) {                when (position) {                    0 -> {                        if (verticalRecyclerViewAdapter?.itemCount!! > 2 && getDataSet().size == 2)                            verticalRecyclerViewAdapter?.deleteItem(position)                        else                            actionUpdate(position)                    }                    1 -> {                        if (verticalRecyclerViewAdapter?.itemCount!! > 2 && getDataSet().size == 2)                            verticalRecyclerViewAdapter?.deleteItem(position)                        else                            actionUpdate(position)                    }                    2 -> {                        if (verticalRecyclerViewAdapter?.itemCount == 2 && getDataSet().size == 2)                            actionUpdate(verticalRecyclerViewAdapter?.itemCount!!)                        else                            verticalRecyclerViewAdapter?.deleteItem(position)                    }                    3 -> {                        if (verticalRecyclerViewAdapter?.itemCount == 2 && getDataSet().size == 2)                            actionUpdate(verticalRecyclerViewAdapter?.itemCount!!)                        else if (verticalRecyclerViewAdapter?.itemCount == 3 && getDataSet().size == 2)                            actionUpdate(position - 1)                        else                            verticalRecyclerViewAdapter?.deleteItem(position)                    }                    4 -> {                        if (verticalRecyclerViewAdapter?.itemCount == 2 && getDataSet().size == 2)                            actionUpdate(verticalRecyclerViewAdapter?.itemCount!!)                        else                            verticalRecyclerViewAdapter?.deleteItem(position)                    }                    5 -> {                        if (verticalRecyclerViewAdapter?.itemCount == 2 && getDataSet().size == 2)                            actionUpdate(verticalRecyclerViewAdapter?.itemCount!!)                        else                            verticalRecyclerViewAdapter?.deleteItem(position)                    }                    6 -> {                        if (verticalRecyclerViewAdapter?.itemCount == 2 && getDataSet().size == 2)                            actionUpdate(verticalRecyclerViewAdapter?.itemCount!!)                        else                            verticalRecyclerViewAdapter?.deleteItem(position)                    }                    else                    -> verticalRecyclerViewAdapter?.deleteItem(position)                }            }        }    }    fun onAddClick() {        // continue with add        if (verticalRecyclerViewAdapter?.itemCount in 1..5) {            actionAdd()        }    }    private fun actionAdd() {        Pref.setValue(context, "FL_FROM", " " + "@" + verticalRecyclerViewAdapter!!.itemCount)        Pref.setValue(context, "FL_TO", " " + "@" + verticalRecyclerViewAdapter!!.itemCount)        val `object` = FlightViewModel.MultiCitiesForSearch(            Utility.getCurrentDateNow(),            " ",            " "        )        verticalRecyclerViewAdapter?.addItem(`object`, verticalRecyclerViewAdapter!!.itemCount)        recycler_view.scrollToPosition(verticalRecyclerViewAdapter!!.itemCount)    }    private fun actionUpdate(position: Int) {        Pref.setValue(context, "FL_FROM", " " + "@" + position)        Pref.setValue(context, "FL_TO", " " + "@" + position)        val `object` = FlightViewModel.MultiCitiesForSearch(            Utility.getCurrentDateNow(),            " ",            " "        )        verticalRecyclerViewAdapter?.updateItem(`object`, position)        //recycler_view.scrollToPosition(position)    }    fun onEditTextChangeClick(        position: Int,        text: String?,        depTextView: TextView?,        paramName: String    ) {        var flyFrom: String = " "        var flyTo: String = " "        var depDate: String = " "        when (paramName) {            "fly_from" ->                flyFrom = text!!            "fly_to" ->                flyTo = text!!            "depDate" -> {                flyFrom= verticalRecyclerViewAdapter!!.getSearchParamList()[position].fly_from                flyTo= verticalRecyclerViewAdapter!!.getSearchParamList()[position].fly_to                depDate = text!!            }        }        if (flyFrom.isBlank()) {            if (position == Pref.getValue(context, "FL_FROM", "")?.substringAfterLast("@")!!.toInt())                flyFrom = Pref.getValue(context, "FL_FROM", "")!!        }        if (flyTo.isBlank()) {            var itemPosition = Pref.getValue(context, "FL_TO", "")?.substringAfterLast("@")            if (position == itemPosition?.toInt())                flyTo = Pref.getValue(context, "FL_TO", "")!!        }        if (depDate.isNullOrBlank())            depDate = depTextView?.text.toString()        if (flyFrom.isNotBlank() && flyTo.isNotBlank()) {            val `object` = FlightViewModel.MultiCitiesForSearch(                depDate,                flyFrom!!,                flyTo!!            )            Log.d("edit click -", `object`.fly_from + " - " + `object`.fly_to + " - " + `object`.date_from)            verticalRecyclerViewAdapter?.updateItem(`object`, position)            //recycler_view.scrollToPosition(verticalRecyclerViewAdapter!!.itemCount)        }    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        retainInstance = true    }    override fun onPause() {        super.onPause()        edt_from.error = null//removes error        edt_to.error = null    }    private fun openSearchActivityFlightReturn(        title: String,        selectionRequest: Int,        flag: String    ) {        val intent = Intent(context, FlightSearchActivity::class.java)        intent.putExtra(Constant.Path.ACTIVITY_TITLE, title)        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)        intent.putExtra(Constant.Path.FLAG, flag)        startActivityForResult(intent, selectionRequest)    }    private fun attemptSearch(listM: ArrayList<FlightViewModel.MultiCitiesForSearch>) {        // Reset errors.        edt_from.error = null        edt_to.error = null        //val departureDate = tv_departure.text.toString()        var cancel = false        var focusView: View? = null        if (TextUtils.isEmpty(fromEditView?.text)) {            edt_from.error = getString(R.string.error_field_required_from_airport)            focusView = fromEditView            cancel = true        } else if (TextUtils.isEmpty(fromEditView?.text)) {            edt_to.error = getString(R.string.error_field_required_to_airport)            focusView = fromEditView            cancel = true        }/* else if (fromCode.equals(toCode)) {            CustomDialogPresenter.showDialog(                context,                "",                getString(R.string.error_field_same_location),                context!!.resources.getString(                    R.string.ok                ),                null,                null            )            cancel = true        }*/        if (cancel) {            focusView?.requestFocus()        } else {            var mDataset: ArrayList<FlightViewModel.MultiCitiesForSearch>? = ArrayList()            mDataset?.addAll(listM)            for (list in mDataset!!.indices) {                mDataset!![list].fly_to = mDataset[list].fly_to.substringAfter("(").substringBefore(")")                mDataset[list].fly_from = mDataset[list].fly_from.substringAfter("(").substringBefore(")")            }            callFlightDetailsApi(listM)        }    }    private var currency: String? = ""    private fun callFlightDetailsApi(listM: ArrayList<FlightViewModel.MultiCitiesForSearch>) {        currency = Pref.getValue(context, PrefConstants.CURRENCY_DEFAULT, "")        presenter.callMulticityDetails(            adults!!,            children!!,            currency!!,            Pref.getValue(context, PrefConstants.USER_ID, "0").toString(),            infants!!,            "in-EN",            listM,            travelClassCode.toString(),//ECONOMY, PREMIUM_ECONOMY, BUSINESS, FIRST\            Pref.getValue(context, PrefConstants.USER_ID, "0").toString()        )    }    private var adults: String? = "1"    private var children: String? = "0"    private var infants: String? = "0"    private var adapterPosition: Int = 0    private var adapterApplyPosition: Int = 0    private val listM: ArrayList<FlightViewModel.MultiCitiesForSearch> = ArrayList()    private fun selectTravelClass() {        val dialogBuilder = AlertDialog.Builder(this.context!!).create()        val inflater = this.layoutInflater        val dialogView = inflater.inflate(R.layout.sort_by_dialog, null)        dialogView.ll_passenger_info.visibility = View.VISIBLE        dialogView.ll_apply.visibility = View.VISIBLE        dialogView.tv_dialog_header.text = getString(R.string.passenger_information)        dialogView.tv_dialog_header_rcv.text = getString(R.string.cabin_class)        dialogView.tv_quantity_adult.text = adults        dialogView.tv_quantity_children.text = children        dialogView.tv_quantity_infants.text = infants        dialogView.imv_minus_adult.setOnClickListener {            Utility.onMinusClick(dialogView.tv_quantity_adult, true, false, dialogView.tv_quantity_infants)        }        dialogView.imv_plus_adult.setOnClickListener {            Utility.onAddClick(dialogView.tv_quantity_adult, true, false, "")        }        dialogView.imv_minus_children.setOnClickListener {            Utility.onMinusClick(dialogView.tv_quantity_children, false, false, null)        }        dialogView.imv_plus_children.setOnClickListener {            Utility.onAddClick(dialogView.tv_quantity_children, false, false, "")        }        dialogView.imv_minus_infants.setOnClickListener {            Utility.onMinusClick(                dialogView.tv_quantity_infants,                false,                true,                null            )        }        dialogView.imv_plus_infants.setOnClickListener {            Utility.onAddClick(                dialogView.tv_quantity_infants,                false,                true,                dialogView.tv_quantity_adult.text.toString()            )        }        dialogView.button_dialog_apply.setOnClickListener {            adults = dialogView.tv_quantity_adult.text.toString()            children = dialogView.tv_quantity_children.text.toString()            infants = dialogView.tv_quantity_infants.text.toString()            btn_passengers_multicity.text = dialogView.tv_quantity_adult.text.toString() + " Adult " +                    dialogView.tv_quantity_children.text.toString() + " Children " +                    dialogView.tv_quantity_infants.text.toString() + " Infants "            btn_class_multicity.text = travelClass            attemptSearch(listM)            dialogBuilder.dismiss()        }        dataListTravelClass!!.get(adapterPosition).isSelected = true        val layoutManager = LinearLayoutManager(context)        dialogView.selection_list?.layoutManager = layoutManager        val adapter = SignleSelectionAdapter(            this.context!!,            dataListTravelClass!!, true,            object : SignleSelectionAdapter.OnClickListener {                override fun onListItemClick(                    dataList: ArrayList<CommonSelectorPojo>,                    position: Int                ) {                    adapterPosition = position                    travelClassCode = dataList[position].code                    travelClass = dataList[position].itemsName                }            })        dialogView.button_dialog_cancel.setOnClickListener {            dataListTravelClass!!.get(adapterPosition).isSelected = false            adapter.notifyDataSetChanged()            dialogBuilder.dismiss()        }        dialogView.selection_list.adapter = adapter        dialogBuilder.setView(dialogView)        dialogBuilder.show()    }    private var dataListTravelClass: ArrayList<CommonSelectorPojo>? = null    private fun init() {        this.model = FlightViewModel(context)        this.presenter = FlightPresenterImpl(this, context)        dataListTravelClass = ArrayList()        //travel class //ECONOMY, PREMIUM_ECONOMY, BUSINESS, FIRST        dataListTravelClass?.add(            CommonSelectorPojo(                "1",                getString(R.string.economy_text),                getString(R.string.economy_code),                true            )        )        dataListTravelClass?.add(            CommonSelectorPojo(                "2",                getString(R.string.pre_economy_text),                getString(R.string.pre_economy_code),                false            )        )        dataListTravelClass?.add(            CommonSelectorPojo(                "3",                getString(R.string.business_text),                getString(R.string.business_code),                false            )        )        dataListTravelClass?.add(            CommonSelectorPojo(                "4",                getString(R.string.first_text),                getString(R.string.first_code),                false            )        )    }    private fun setDataAndListeners(v: View) {        plus.setOnClickListener { onAddClick() }        btn_class_multicity.setOnClickListener { selectTravelClass() }        btn_class_multicity.text = travelClass        btn_passengers_multicity.text = Utility.showPassengersAdult(adults).toString() +                Utility.showPassengersChildren(children).toString() +                Utility.showPassengersInfants(infants).toString()        btn_passengers_multicity.setOnClickListener { selectTravelClass() }        im_btn_search_multicity.setOnClickListener {            listM.clear()            listM.addAll(verticalRecyclerViewAdapter!!.getSearchParamList())            for (list in listM.indices!!) {                Log.d("date_from === $list  ", listM[list].date_from)                Log.d("fly_to === $list  ", listM[list].fly_to.substringAfter("(").substringBefore(")"))                Log.d("fly_from === $list  ", listM[list].fly_from.substringAfter("(").substringBefore(")"))            }            attemptSearch(listM)        }    }    override fun onDepartureDateClick(position: Int, tv_departure: TextView) {        Utility.dateDialogWithMinMaxDateMulticity(Calendar.getInstance(), activity, tv_departure, 0,            DatePickerDialog.OnDateSetListener { _, year, monthOfYear, dayOfMonth ->                val writeFormat = SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH)                val newDate = Calendar.getInstance()                newDate.set(year, monthOfYear, dayOfMonth)                tv_departure.text = writeFormat.format(newDate.time)                onEditTextChangeClick(position, tv_departure.text.toString(), depTextView, "depDate")            })    }    var fromEditView: EditText? = null    var toEditView: EditText? = null    var depTextView: TextView? = null    var position: Int = 0    override fun onFromClick(edtFrom: EditText, edtTo: EditText, dep: TextView, position: Int) {        if (MainApplication.getInstance.isConnected()) {            //Utility.hideSoftKeyboard(v)            openSearchActivityFlightReturn(                this.javaClass.simpleName.toString(),                FROM_SELECTION_REQUEST,                Constant.Path.FROM            )            fromEditView = edtFrom            toEditView = edtTo            depTextView = dep            this.position = position        } else {            doRetrieveModel().errorMessage.message =                doRetrieveModel().context!!.getString(R.string.message_no_internet)            showState(FlightPresenter.MainView.ViewState.ERROR)        }    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        when (requestCode) {            FROM_SELECTION_REQUEST -> {                if (resultCode == Activity.RESULT_OK) {                    isItemClicked = true                    fromCode = data?.getStringExtra(PrefConstants.SELECTED_ITEMS_TYPE)                    fromEditView?.setText(                        data?.getStringExtra(PrefConstants.SELECTED_ITEMS_NAME)                    )                    Pref.setValue(context, "FL_FROM", fromEditView?.text.toString() + "@" + position)                    Log.d("FL_FROM", Pref.getValue(context, "FL_FROM", ""))                    if (fromEditView?.text!!.toString().equals(toEditView?.text.toString())) {                        fromEditView?.setText("")                        CustomDialogPresenter.showDialog(                            context,                            "",                            getString(R.string.error_field_same_location),                            context!!.resources.getString(                                R.string.ok                            ),                            null,                            null                        )                    }else                    onEditTextChangeClick(position, fromEditView!!.text.toString(), depTextView, "fly_from")                }            }            TO_SELECTION_REQUEST -> {                if (resultCode == Activity.RESULT_OK) {                    isItemClickedTo = true                    toCode = data?.getStringExtra(PrefConstants.SELECTED_ITEMS_TYPE)                    toEditView?.setText(                        data?.getStringExtra(PrefConstants.SELECTED_ITEMS_NAME)                    )                    Pref.setValue(context, "FL_TO", toEditView?.text.toString() + "@" + position)                    Log.d("FL_TO", Pref.getValue(context, "FL_TO", ""))                    if (toEditView?.text!!.toString().equals(fromEditView?.text!!.toString())) {                        toEditView?.setText("")                        CustomDialogPresenter.showDialog(                            context,                            "",                            getString(R.string.error_field_same_location),                            context!!.resources.getString(                                R.string.ok                            ),                            null,                            null                        )                    }else                    onEditTextChangeClick(position, toEditView?.text.toString(), depTextView, "fly_to")                }            }            /*Filter_SELECTION_REQUEST -> {                if (resultCode == Activity.RESULT_OK) {                    filterData = data?.getParcelableExtra(Constant.Path.FILTER_DATA)                    callFlightDetailsApi(filterData)                }            }*/        }    }    //private val Filter_SELECTION_REQUEST = 503    override fun onToClick(edtTo: EditText, edtFrom: EditText, dep: TextView, position: Int) {        if (MainApplication.getInstance.isConnected()) {            //Utility.hideSoftKeyboard(v)            openSearchActivityFlightReturn(                this.javaClass.simpleName.toString(),                TO_SELECTION_REQUEST,                Constant.Path.TO            )            toEditView = edtTo            fromEditView = edtFrom            depTextView = dep            this.position = position        } else {            doRetrieveModel().errorMessage.message =                doRetrieveModel().context!!.getString(R.string.message_no_internet)            showState(FlightPresenter.MainView.ViewState.ERROR)        }    }    override fun onBackPressed(): Boolean {        return fragmentManager?.popBackStackImmediate()!!    }}