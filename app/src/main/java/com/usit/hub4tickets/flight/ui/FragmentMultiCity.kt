package com.usit.hub4tickets.flight.uiimport android.app.Activityimport android.content.Intentimport android.os.Bundleimport android.support.v7.app.AlertDialogimport android.support.v7.widget.LinearLayoutManagerimport android.text.TextUtilsimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.EditTextimport android.widget.TextViewimport com.usit.hub4tickets.MainApplicationimport com.usit.hub4tickets.Rimport com.usit.hub4tickets.common.RootFragmentimport com.usit.hub4tickets.domain.presentation.presenters.FlightPresenterimport com.usit.hub4tickets.domain.presentation.screens.main.FlightPresenterImplimport com.usit.hub4tickets.flight.adapter.VerticalRecyclerViewAdapterimport com.usit.hub4tickets.flight.model.FlightViewModelimport com.usit.hub4tickets.search.AirportsSearchActivityimport com.usit.hub4tickets.search.model.CommonSelectorPojoimport com.usit.hub4tickets.utils.*import com.usit.hub4tickets.utils.view.dialog.CustomDialogPresenterimport kotlinx.android.synthetic.main.fragment_multicity.*import kotlinx.android.synthetic.main.sort_by_dialog.view.*import java.util.*class FragmentMultiCity : RootFragment(), FlightPresenter.MainView,    VerticalRecyclerViewAdapter.MyClickListener {    private var reset: Boolean = false    private var isItemClicked: Boolean = false    private var isItemClickedTo: Boolean = false    private var fromCode: String? = null    private var toCode: String? = null    private var travelClassCode: String? = "ECONOMY"    private var travelClass: String? = "Economy"    private val FROM_SELECTION_REQUEST = 701    private val TO_SELECTION_REQUEST = 702    private val CALENDER_SELECTION_REQUEST = 704    private var selectedFromDt: String? = ""    private lateinit var model: FlightViewModel    private lateinit var presenter: FlightPresenter    private var totalPassengers: String = ""    var verticalRecyclerViewAdapter: VerticalRecyclerViewAdapter? = null    private var adults: String? = "1"    private var children: String? = "0"    private var infants: String? = "0"    private var adapterPosition: Int = 0    private var fromEditView: EditText? = null    private var toEditView: EditText? = null    private var depTextView: TextView? = null    var position: Int = 0    private var mUserSeen = false    private var mViewCreated = false    private val listM: ArrayList<FlightViewModel.MultiCitiesForSearch> = ArrayList()    private var dataListTravelClass: ArrayList<CommonSelectorPojo>? = null    override fun doRetrieveModel(): FlightViewModel = this.model    override fun showState(viewState: FlightPresenter.MainView.ViewState) {        when (viewState) {            FlightPresenter.MainView.ViewState.IDLE -> {                Utility.showProgress(false, context)            }            FlightPresenter.MainView.ViewState.LOADING -> {                Utility.showProgress(true, context)            }            FlightPresenter.MainView.ViewState.MULTICITY_DETAILS_SUCCESS -> {                showList(model.multiCityListViewModel)            }            FlightPresenter.MainView.ViewState.FLIGHT_NOT_FOUND            -> {                Utility.showCustomDialog(context, model.multiCityListViewModel.message, "", null)            }            FlightPresenter.MainView.ViewState.ERROR            -> {                Utility.showCustomDialog(context, doRetrieveModel().errorMessage.message, "", null)            }        }    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        retainInstance = true    }    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {        return inflater.inflate(R.layout.fragment_multicity, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        recycler_view.layoutManager = LinearLayoutManager(activity)        verticalRecyclerViewAdapter = VerticalRecyclerViewAdapter(getDataSet(), this)        recycler_view.adapter = verticalRecyclerViewAdapter        mViewCreated = true        tryViewCreatedFirstSight()    }    override fun setUserVisibleHint(isVisibleToUser: Boolean) {        super.setUserVisibleHint(isVisibleToUser)        if (!mUserSeen && isVisibleToUser) {            mUserSeen = true            onUserFirstSight()            tryViewCreatedFirstSight()        }        //Log.d("isVisibleToUser", isVisibleToUser.toString())        onUserVisibleChanged(isVisibleToUser)    }    private fun tryViewCreatedFirstSight() {        if (mUserSeen && mViewCreated) {            // Log.d("mUserSeen", mUserSeen.toString() + "mViewCreated" + mViewCreated.toString())            onViewCreatedFirstSight(view)        }    }    private fun onViewCreatedFirstSight(view: View?) {        init()        setDataAndListeners(view!!)    }    private fun onUserFirstSight() {        im_btn_search_multicity.setOnClickListener {            listM.clear()            listM.addAll(verticalRecyclerViewAdapter!!.getSearchParamList())            for (list in listM.indices!!) {                Log.d("date_from === $list  ", listM[list].date_from)                Log.d("fly_to === $list  ", listM[list].fly_to.substringAfter("(").substringBefore(")"))                Log.d("fly_from === $list  ", listM[list].fly_from.substringAfter("(").substringBefore(")"))            }            attemptSearch(listM)        }    }    private fun onUserVisibleChanged(visible: Boolean) {        // Log.d("visible", visible.toString())    }    override fun onDestroyView() {        super.onDestroyView()        mViewCreated = false        mUserSeen = false    }    private fun getDataSet(): ArrayList<FlightViewModel.MultiCitiesForSearch> {        var results = ArrayList<FlightViewModel.MultiCitiesForSearch>()        for (index in 0..1) {            this.position = index            Pref.setValue(context, PrefConstants.FL_FROM, " " + "@" + index)            Pref.setValue(context, PrefConstants.FL_TO, " " + "@" + index)            if (index == 0) {                val obj = FlightViewModel.MultiCitiesForSearch(                    Utility.getCurrentDateNow(),                    "",                    " "                )                Log.d("getDataset-", "$index")                results.add(index, obj)            } else {                val obj = FlightViewModel.MultiCitiesForSearch(                    "",                    "",                    " "                )                Log.d("getDataset-", "$index")                results.add(index, obj)            }        }        return results    }    override fun onMinusClick(position: Int, holder: VerticalRecyclerViewAdapter.DataObjectHolder) {        if (verticalRecyclerViewAdapter?.itemCount in 2..6) {            Log.d(                "position - ",                position.toString() + " itemCount- " + verticalRecyclerViewAdapter?.itemCount + " size-" + getDataSet().size            )            if (position in 0..6) {                when (position) {                    0 -> {                        if (verticalRecyclerViewAdapter?.itemCount!! > 2 && getDataSet().size == 2)                            verticalRecyclerViewAdapter?.deleteItem(position)                        else if (verticalRecyclerViewAdapter?.itemCount!! == 2 && getDataSet().size == 2)                            actionUpdate(position)                        else if (verticalRecyclerViewAdapter?.itemCount!! > 2 && getDataSet().size == 2)                            actionUpdate(position - 1)                        else                            actionUpdate(position)                    }                    1 -> {                        if (verticalRecyclerViewAdapter?.itemCount!! > 2 && getDataSet().size == 2)                            verticalRecyclerViewAdapter?.deleteItem(position)                        else if (verticalRecyclerViewAdapter?.itemCount!! == 2 && getDataSet().size == 2)                            actionUpdate(position)                        else if (verticalRecyclerViewAdapter?.itemCount!! >= 3 && getDataSet().size == 2)                            actionUpdate(position - 1)                        else                            actionUpdate(position)                    }                    2 -> {                        if (verticalRecyclerViewAdapter?.itemCount == 2 && getDataSet().size == 2)                            actionUpdate(position - 1)                        else                            verticalRecyclerViewAdapter?.deleteItem(position)                    }                    3 -> {                        if (verticalRecyclerViewAdapter?.itemCount == 2 && getDataSet().size == 2)                            actionUpdate(position)                        /*  else if (verticalRecyclerViewAdapter?.itemCount == 3 && getDataSet().size == 2)                              actionUpdate(position - 1)*/                        else                            verticalRecyclerViewAdapter?.deleteItem(position)                    }                    4 -> {                        if (verticalRecyclerViewAdapter?.itemCount == 2 && getDataSet().size == 2)                            actionUpdate(position)                        else                            verticalRecyclerViewAdapter?.deleteItem(position)                    }                    5 -> {                        if (verticalRecyclerViewAdapter?.itemCount == 2 && getDataSet().size == 2)                            actionUpdate(position)                        else                            verticalRecyclerViewAdapter?.deleteItem(position)                    }                    6 -> {                        if (verticalRecyclerViewAdapter?.itemCount == 2 && getDataSet().size == 2)                            actionUpdate(position)                        else                            verticalRecyclerViewAdapter?.deleteItem(position)                    }                    else                    -> verticalRecyclerViewAdapter?.deleteItem(position)                }            }        }    }    private fun onAddClick() {        // continue with add        if (verticalRecyclerViewAdapter?.itemCount in 1..5) {            actionAdd()        }    }    private fun actionAdd() {        Pref.setValue(context, PrefConstants.FL_FROM, " " + "@" + verticalRecyclerViewAdapter!!.itemCount)        Pref.setValue(context, PrefConstants.FL_TO, " " + "@" + verticalRecyclerViewAdapter!!.itemCount)        // var date: String        // date = verticalRecyclerViewAdapter!!.getSearchParamList()[verticalRecyclerViewAdapter!!.itemCount - 1].date_from        val `object` = FlightViewModel.MultiCitiesForSearch(            "",            " ",            " "        )        verticalRecyclerViewAdapter?.addItem(`object`, verticalRecyclerViewAdapter!!.itemCount)        recycler_view.scrollToPosition(verticalRecyclerViewAdapter!!.itemCount)    }    private fun actionUpdate(position: Int) {        Pref.setValue(context, PrefConstants.FL_FROM, " " + "@" + position)        Pref.setValue(context, PrefConstants.FL_TO, " " + "@" + position)        var date: String        if (position == 0)            date = Utility.getCurrentDateNow()        //else        //    if (position == 1)        //        date = verticalRecyclerViewAdapter!!.getSearchParamList()[position - 1].date_from        //    else        date = verticalRecyclerViewAdapter!!.getSearchParamList()[position].date_from        val `object` = FlightViewModel.MultiCitiesForSearch(            date,            " ",            " "        )        verticalRecyclerViewAdapter?.updateItem(`object`, position, reset)        //recycler_view.scrollToPosition(position)    }    private fun onEditTextChangeClick(        position: Int,        text: String?,        depTextView: TextView?,        paramName: String    ) {        var flyFrom: String = " "        var flyTo: String = " "        var depDate: String = " "        when (paramName) {            "fly_from" -> {                flyFrom = text!!                flyTo = verticalRecyclerViewAdapter!!.getSearchParamList()[position].fly_to            }            "fly_to" -> {                flyTo = text!!                flyFrom = verticalRecyclerViewAdapter!!.getSearchParamList()[position].fly_from            }            "depDate" -> {                flyFrom = verticalRecyclerViewAdapter!!.getSearchParamList()[position].fly_from                flyTo = verticalRecyclerViewAdapter!!.getSearchParamList()[position].fly_to                depDate = text!!            }        }        /* if (flyFrom.isBlank()) {             if (position == Pref.getValue(context, PrefConstants.FL_FROM, "")?.substringAfterLast("@")!!.toInt()) {                 flyFrom = Pref.getValue(context, PrefConstants.FL_FROM, "")!!                 this.position = position             }         }         if (flyTo.isBlank()) {             var itemPosition = Pref.getValue(context, PrefConstants.FL_TO, "")?.substringAfterLast("@")             if (position == itemPosition?.toInt()) {                 flyTo = Pref.getValue(context, PrefConstants.FL_TO, "")!!                 this.position = position             }         }*/        if (depDate.isNullOrBlank())            depDate = verticalRecyclerViewAdapter!!.getSearchParamList()[position].date_from        //reset dates if choosen previous date greater        if (paramName == "depDate" && reset) {            for (indexPosition in verticalRecyclerViewAdapter!!.getSearchParamList().indices) {                if (indexPosition >= position) {                    val `object` = FlightViewModel.MultiCitiesForSearch(                        depDate,                        verticalRecyclerViewAdapter!!.getSearchParamList()[indexPosition].fly_from,                        verticalRecyclerViewAdapter!!.getSearchParamList()[indexPosition].fly_to                    )                    verticalRecyclerViewAdapter?.updateItem(`object`, indexPosition, reset)                } else {                    val `object` = FlightViewModel.MultiCitiesForSearch(                        verticalRecyclerViewAdapter!!.getSearchParamList()[indexPosition].date_from,                        verticalRecyclerViewAdapter!!.getSearchParamList()[indexPosition].fly_from,                        verticalRecyclerViewAdapter!!.getSearchParamList()[indexPosition].fly_to                    )                    verticalRecyclerViewAdapter?.updateItem(`object`, indexPosition, reset)                }            }            verticalRecyclerViewAdapter?.notifyItemChanged(position, verticalRecyclerViewAdapter!!.itemCount)        } else {            // if (flyFrom.isNotBlank() && flyTo.isNotBlank() && depDate.isNotBlank()) {            val `object` = FlightViewModel.MultiCitiesForSearch(                depDate,                flyFrom!!,                flyTo!!            )            Log.d("edit click -", `object`.fly_from + " - " + `object`.fly_to + " - " + `object`.date_from)            verticalRecyclerViewAdapter?.updateItem(`object`, position, reset)        }        //recycler_view.scrollToPosition(verticalRecyclerViewAdapter!!.itemCount)        // }    }    private fun selectTravelClass() {        val dialogBuilder = AlertDialog.Builder(this.context!!).create()        val inflater = this.layoutInflater        val dialogView = inflater.inflate(R.layout.sort_by_dialog, null)        dialogView.ll_passenger_info.visibility = View.VISIBLE        dialogView.ll_apply.visibility = View.VISIBLE        dialogView.tv_dialog_header.text = getString(R.string.passenger_information)        dialogView.tv_dialog_header_rcv.text = getString(R.string.cabin_class)        dialogView.tv_quantity_adult.text = adults        dialogView.tv_quantity_children.text = children        dialogView.tv_quantity_infants.text = infants        dialogView.imv_minus_adult.setOnClickListener {            Utility.onMinusClick(dialogView.tv_quantity_adult, true, false, dialogView.tv_quantity_infants)        }        dialogView.imv_plus_adult.setOnClickListener {            Utility.onAddClick(dialogView.tv_quantity_adult, true, false, "")        }        dialogView.imv_minus_children.setOnClickListener {            Utility.onMinusClick(dialogView.tv_quantity_children, false, false, null)        }        dialogView.imv_plus_children.setOnClickListener {            Utility.onAddClick(dialogView.tv_quantity_children, false, false, "")        }        dialogView.imv_minus_infants.setOnClickListener {            Utility.onMinusClick(                dialogView.tv_quantity_infants,                false,                true,                null            )        }        dialogView.imv_plus_infants.setOnClickListener {            Utility.onAddClick(                dialogView.tv_quantity_infants,                false,                true,                dialogView.tv_quantity_adult.text.toString()            )        }        dialogView.button_dialog_apply.setOnClickListener {            adults = dialogView.tv_quantity_adult.text.toString()            children = dialogView.tv_quantity_children.text.toString()            infants = dialogView.tv_quantity_infants.text.toString()            btn_passengers_multicity.text = dialogView.tv_quantity_adult.text.toString() + " Adult " +                    dialogView.tv_quantity_children.text.toString() + " Children " +                    dialogView.tv_quantity_infants.text.toString() + " Infants "            tv_class.text = ", " + travelClass            attemptSearch(listM)            dialogBuilder.dismiss()        }        dataListTravelClass!![adapterPosition].isSelected = true        val layoutManager = LinearLayoutManager(context)        dialogView.selection_list?.layoutManager = layoutManager        val adapter = SignleSelectionAdapter(            this.context!!,            dataListTravelClass!!, true,            object : SignleSelectionAdapter.OnClickListener {                override fun onListItemClick(                    dataList: ArrayList<CommonSelectorPojo>,                    position: Int                ) {                    adapterPosition = position                    travelClassCode = dataList[position].code                    travelClass = dataList[position].itemsName                }            })        dialogView.button_dialog_cancel.setOnClickListener {            dataListTravelClass!![adapterPosition].isSelected = false            adapter.notifyDataSetChanged()            dialogBuilder.dismiss()        }        dialogView.selection_list.adapter = adapter        dialogBuilder.setView(dialogView)        dialogBuilder.show()    }    private fun init() {        this.model = FlightViewModel(context)        this.presenter = FlightPresenterImpl(this, context)        dataListTravelClass = ArrayList()        //travel class //ECONOMY, PREMIUM_ECONOMY, BUSINESS, FIRST        dataListTravelClass?.add(            CommonSelectorPojo(                "1",                getString(R.string.economy_text),                getString(R.string.economy_code),                true            )        )        dataListTravelClass?.add(            CommonSelectorPojo(                "2",                getString(R.string.pre_economy_text),                getString(R.string.pre_economy_code),                false            )        )        dataListTravelClass?.add(            CommonSelectorPojo(                "3",                getString(R.string.business_text),                getString(R.string.business_code),                false            )        )        dataListTravelClass?.add(            CommonSelectorPojo(                "4",                getString(R.string.first_text),                getString(R.string.first_code),                false            )        )    }    private fun setDataAndListeners(v: View) {        plus.setOnClickListener { onAddClick() }        tv_class.setOnClickListener { selectTravelClass() }        tv_class.text = ", " + travelClass        btn_passengers_multicity.text = Utility.showPassengersAdult(adults).toString() +                Utility.showPassengersChildren(children).toString() +                Utility.showPassengersInfants(infants).toString()        btn_passengers_multicity.setOnClickListener { selectTravelClass() }    }    override fun onDepartureDateClick(position: Int, tv_departure: TextView) {        depTextView = tv_departure        openCalenderActivityMulticity(            javaClass.simpleName.toString(),            "DepartureClick", CALENDER_SELECTION_REQUEST,            position        )    }    private fun openCalenderActivityMulticity(        title: String, action: String,        selectionRequest: Int,        position: Int    ) {        this.position = position        val intent = Intent(context, CalenderActivity::class.java)        intent.putExtra(Constant.Path.ACTIVITY_TITLE, title)        intent.putExtra(Constant.Path.ACTION_TITLE, action)        intent.putExtra(Constant.Path.POSITION, position)        if (position > 0) {            intent.putExtra(                Constant.Path.SELECTED_FROM_DATE,                verticalRecyclerViewAdapter!!.getSearchParamList()[position - 1].date_from            )        } else {            intent.putExtra(                Constant.Path.SELECTED_FROM_DATE,                verticalRecyclerViewAdapter!!.getSearchParamList()[position].date_from            )        }        if (verticalRecyclerViewAdapter!!.getSearchParamList().size > position + 1)            intent.putExtra(                Constant.Path.SELECTED_FROM_DATE_AFTER,                verticalRecyclerViewAdapter!!.getSearchParamList()[position + 1].date_from            )        else            intent.putExtra(                Constant.Path.SELECTED_FROM_DATE_AFTER,                ""            )        if (verticalRecyclerViewAdapter!!.getSearchParamList()[position].date_from.equals("")) {            intent.putExtra(                Constant.Path.SELECTED_FROM_DATE_BEFORE,                verticalRecyclerViewAdapter!!.getSearchParamList()[position - 1].date_from            )        } else {            intent.putExtra(                Constant.Path.SELECTED_FROM_DATE_BEFORE,                verticalRecyclerViewAdapter!!.getSearchParamList()[position].date_from            )        }        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)        startActivityForResult(intent, selectionRequest)    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        when (requestCode) {            FROM_SELECTION_REQUEST -> {                if (resultCode == Activity.RESULT_OK) {                    isItemClicked = true                    fromCode = data?.getStringExtra(PrefConstants.SELECTED_AIRPORT_CODE)                    fromEditView?.setText(                        data?.getStringExtra(PrefConstants.SELECTED_AIRPORT_NAME)                    )                    Pref.setValue(context, PrefConstants.FL_FROM, fromEditView?.text.toString() + "@" + position)                    Log.d(PrefConstants.FL_FROM, Pref.getValue(context, PrefConstants.FL_FROM, ""))                    if (fromEditView?.text!!.toString().equals(toEditView?.text.toString())) {                        fromEditView?.setText("")                        CustomDialogPresenter.showDialog(                            context,                            "",                            getString(R.string.error_field_same_location),                            context!!.resources.getString(                                R.string.ok                            ),                            null,                            null                        )                    } else                        onEditTextChangeClick(position, fromEditView!!.text.toString(), depTextView, "fly_from")                }            }            TO_SELECTION_REQUEST -> {                if (resultCode == Activity.RESULT_OK) {                    isItemClickedTo = true                    toCode = data?.getStringExtra(PrefConstants.SELECTED_AIRPORT_CODE)                    toEditView?.setText(                        data?.getStringExtra(PrefConstants.SELECTED_AIRPORT_NAME)                    )                    Pref.setValue(context, PrefConstants.FL_TO, toEditView?.text.toString() + "@" + position)                    Log.d(PrefConstants.FL_TO, Pref.getValue(context, PrefConstants.FL_TO, ""))                    if (toEditView?.text!!.toString().equals(fromEditView?.text!!.toString())) {                        toEditView?.setText("")                        CustomDialogPresenter.showDialog(                            context,                            "",                            getString(R.string.error_field_same_location),                            context!!.resources.getString(                                R.string.ok                            ),                            null,                            null                        )                    } else                        onEditTextChangeClick(position, toEditView?.text.toString(), depTextView, "fly_to")                }            }            CALENDER_SELECTION_REQUEST -> {                if (resultCode == Activity.RESULT_OK) {                    selectedFromDt = data?.getStringExtra(Constant.Path.RETURN_SELECTED_DEP_DATE)                    reset = data?.getBooleanExtra(Constant.Path.RESET, false)!!                    depTextView?.text = selectedFromDt                    onEditTextChangeClick(position, selectedFromDt, depTextView, "depDate")                }            }        }    }    override fun onToClick(edtTo: EditText, edtFrom: EditText, dep: TextView, position: Int) {        if (MainApplication.getInstance.isConnected()) {            //Utility.hideSoftKeyboard(v)            openSearchActivityFlightReturn(                this.javaClass.simpleName.toString(),                TO_SELECTION_REQUEST,                Constant.Path.TO            )            toEditView = edtTo            fromEditView = edtFrom            depTextView = dep            this.position = position        } else {            doRetrieveModel().errorMessage.message =                doRetrieveModel().context!!.getString(R.string.message_no_internet)            showState(FlightPresenter.MainView.ViewState.ERROR)        }    }    override fun onFromClick(edtFrom: EditText, edtTo: EditText, dep: TextView, position: Int) {        if (MainApplication.getInstance.isConnected()) {            //Utility.hideSoftKeyboard(v)            openSearchActivityFlightReturn(                this.javaClass.simpleName.toString(),                FROM_SELECTION_REQUEST,                Constant.Path.FROM            )            fromEditView = edtFrom            toEditView = edtTo            depTextView = dep            this.position = position        } else {            doRetrieveModel().errorMessage.message =                doRetrieveModel().context!!.getString(R.string.message_no_internet)            showState(FlightPresenter.MainView.ViewState.ERROR)        }    }    private fun openSearchActivityFlightReturn(        title: String,        selectionRequest: Int,        flag: String    ) {        val intent = Intent(context, AirportsSearchActivity::class.java)        intent.putExtra(Constant.Path.ACTIVITY_TITLE, title)        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)        intent.putExtra(Constant.Path.FLAG, flag)        startActivityForResult(intent, selectionRequest)    }    private fun attemptSearch(listM: ArrayList<FlightViewModel.MultiCitiesForSearch>) {        //val departureDate = tv_departure.text.toString()        var cancel = false        var focusView: View? = null        if (TextUtils.isEmpty(fromEditView?.text)) {            fromEditView?.error = getString(R.string.error_field_required_from_airport)            focusView = fromEditView            cancel = true        } else if (TextUtils.isEmpty(toEditView?.text)) {            toEditView?.error = getString(R.string.error_field_required_to_airport)            focusView = toEditView            cancel = true        }        if (listM[0].fly_from.isNullOrBlank() || listM[0].fly_to.isNullOrBlank() ||            listM[1].fly_from.isNullOrBlank() || listM[1].fly_to.isNullOrBlank()        ) {            Utility.showCustomDialog(                context,                getString(R.string.multicity_empty_fields_validations),                "",                null            )            cancel = true        }        if (cancel) {            focusView?.requestFocus()        } else {            callFlightDetailsApi(getMulticityDataList(listM))        }    }    private fun getMulticityDataList(listM: ArrayList<FlightViewModel.MultiCitiesForSearch>): ArrayList<FlightViewModel.MultiCitiesForSearch1> {        var mDatasetSearch: ArrayList<FlightViewModel.MultiCitiesForSearch1>? = ArrayList()        for (list in listM.indices) {            mDatasetSearch!!.add(                FlightViewModel.MultiCitiesForSearch1(                    listM[list].date_from,                    listM[list].fly_from.substringAfter("(").substringBefore(")"),                    listM[list].fly_to.substringAfter("(").substringBefore(")")                )            )        }        return mDatasetSearch!!    }    private var currency: String? = ""    private fun callFlightDetailsApi(multicitydataList: ArrayList<FlightViewModel.MultiCitiesForSearch1>) {        currency = Pref.getValue(context, PrefConstants.CURRENCY_DEFAULT, "")        presenter.callMulticityDetails(            adults!!,            children!!,            currency!!,            Pref.getValue(context, PrefConstants.USER_ID, "0").toString(),            infants!!,            "in-EN",            multicitydataList,            "",            "",            "",            travelClassCode.toString(),//ECONOMY, PREMIUM_ECONOMY, BUSINESS, FIRST\            Pref.getValue(context, PrefConstants.USER_ID, "0").toString()        )    }    private fun showList(        responseData: FlightViewModel.MultiCityResponse    ) {        totalPassengers =            Utility.showPassengersAdult(adults).toString() + Utility.showPassengersChildren(children).toString() +                    Utility.showPassengersInfants(infants).toString()        val intent = Intent(context, MulticitySearchListActivity::class.java)        intent.putExtra(Constant.Path.MULTICITY_DETAILS, responseData)        intent.putExtra(Constant.Path.MULTICITY_SEARCH_PARAMS, getMulticityDataList(listM))        intent.putExtra(Constant.Path.TOTAL_PASSENGERS, totalPassengers)        intent.putExtra(Constant.Path.CABIN_CLASS, travelClass)        intent.putExtra(Constant.Path.CABIN_CLASS_CODE, travelClassCode)        startActivity(intent)    }    override fun onBackPressed(): Boolean {        return fragmentManager?.popBackStackImmediate()!!    }    /* Multicity Validations     1    Copy 'To' location from the previous level to 'From' location of next level. E.g. level 1 is say Mumbai to Pune copy Pune to level 2, level 2 say Pune to Chennai, Copy Chennai to leve3 if level 3 is added. The user should be able to change From location but should not clear this field     2    To Location should not be null. Please display an Error message like 'Please enter valid flight combination' and show error exclamation on the Empty Field     3    Date Field null: Error message 'Please enter the date' and show error exclamation on the Empty Field     4    Set system date to first level flight date.*/    /*     1.If all To and From location are blank     2.If 2nd location date is less than prev.location date     3.If First and second From & To location is same     4.When we try to add more than 6 location rows     1. If all To and From location are blank: 'Please check and retry with the valid set of combinations.'     2.If 2nd location date is less than prev.location date: 'Date is less than previous flight date.'     3. If First and second From & To location is same: 'Please check and retry with the valid set of combinations.'     4. When we try to add more than 6 location rows; No need to display message disable button to add new levels more than 6.*/}