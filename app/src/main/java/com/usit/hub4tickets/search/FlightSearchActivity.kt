package com.usit.hub4tickets.searchimport android.app.Activityimport android.content.Intentimport android.os.Bundleimport android.support.v7.widget.LinearLayoutManagerimport android.support.v7.widget.RecyclerViewimport android.support.v7.widget.SearchViewimport android.view.Viewimport com.usit.hub4tickets.Rimport com.usit.hub4tickets.domain.presentation.presenters.FlightPresenterimport com.usit.hub4tickets.domain.presentation.screens.BaseActivityimport com.usit.hub4tickets.domain.presentation.screens.main.FlightPresenterImplimport com.usit.hub4tickets.flight.model.FlightViewModelimport com.usit.hub4tickets.search.model.CommonSelectorPojoimport com.usit.hub4tickets.utils.Constantimport com.usit.hub4tickets.utils.PrefConstantsimport com.usit.hub4tickets.utils.Utilityimport kotlinx.android.synthetic.main.activity_comman_serach.*/** * Created by Bhagyashri Burade * Date: 24/10/2018 * Email: bhagyashri.burade@usit.net.in */class FlightSearchActivity : BaseActivity(), FlightPresenter.MainView {    private var searchItemsListAdapter: CommonSearchAdapter? = null    private var strActivityTitle: String? = ""    private lateinit var model: FlightViewModel    private lateinit var presenter: FlightPresenter    private var arrayListCommonSelectorFromInitial: ArrayList<FlightViewModel.AirPortDataResponse.ResponseData> =        ArrayList()    override fun showState(viewState: FlightPresenter.MainView.ViewState) {        when (viewState) {            FlightPresenter.MainView.ViewState.IDLE -> Utility.showProgress(false, this)            FlightPresenter.MainView.ViewState.LOADING -> Utility.showProgress(true, this)            FlightPresenter.MainView.ViewState.SUCCESS_FROM -> {                arrayListCommonSelectorFromInitial.addAll(model.flightViewModel.responseData as ArrayList<FlightViewModel.AirPortDataResponse.ResponseData>)                initView()            }            FlightPresenter.MainView.ViewState.SUCCESS_TO -> {                arrayListCommonSelectorFromInitial.addAll(model.flightViewModel.responseData as ArrayList<FlightViewModel.AirPortDataResponse.ResponseData>)                initView()            }            FlightPresenter.MainView.ViewState.ERROR            -> {                arrayListCommonSelectorFromInitial?.clear()                searchItemsListAdapter?.notifyDataSetChanged()                presenter.presentState(FlightPresenter.MainView.ViewState.IDLE)                Utility.showCustomDialog(this, doRetrieveModel().errorMessage.message, "", null)            }        }    }    override fun doRetrieveModel(): FlightViewModel = this.model    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_comman_serach)        this.model = FlightViewModel(this)        this.presenter = FlightPresenterImpl(this, this)        if (intent.extras != null) {            callAPIAirportData(intent.getStringExtra(Constant.Path.FLAG), "")        }        var searchTextView = this.findViewById<SearchView>(R.id.search_text)        searchTextView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {            override fun onQueryTextSubmit(query: String?): Boolean {                query?.replace("\\s+$".toRegex(), "")                searchItemsListAdapter?.getFilter()?.filter(query)                return false            }            override fun onQueryTextChange(newText: String?): Boolean {                searchItemsListAdapter?.getFilter()?.filter(newText!!.trim { it <= ' ' })                return false            }        })    }    private fun initView() {        val arrayListCommonSelector: ArrayList<CommonSelectorPojo> = ArrayList()        if (arrayListCommonSelectorFromInitial != null) {            for (i in arrayListCommonSelectorFromInitial!!.indices) {                arrayListCommonSelector.add(                    i, CommonSelectorPojo(                        arrayListCommonSelectorFromInitial[i].airPortCode,                        arrayListCommonSelectorFromInitial[i].airPortNameAndCode,                        arrayListCommonSelectorFromInitial[i].airPortCountry                    )                )            }        }        if (null != arrayListCommonSelector) {            searchItemsListAdapter = CommonSearchAdapter(                strActivityTitle,                arrayListCommonSelector,                object : CommonSearchAdapter.OnItemClickListener {                    override fun onListItemClick(data: CommonSelectorPojo) {                        Utility.hideKeyBordActivity(this@FlightSearchActivity)                        val intent = Intent()                        intent.putExtra(PrefConstants.SELECTED_ITEMS_ID, data.id)                        intent.putExtra(PrefConstants.SELECTED_ITEMS_NAME, data.itemsName)                        intent.putExtra(PrefConstants.SELECTED_ITEMS_TYPE, data.id)                        setResult(Activity.RESULT_OK, intent)                        finish()                    }                    override fun onNoData(isVisible: Boolean) {                        if (isVisible) {                            txt_no_data!!.visibility = View.VISIBLE                        } else {                            txt_no_data!!.visibility = View.GONE                        }                    }                })            val mLayoutManager = LinearLayoutManager(this)            recycler_city_list!!.layoutManager = mLayoutManager as RecyclerView.LayoutManager?            recycler_city_list!!.adapter = searchItemsListAdapter        }    }    override fun onBackPressed() {        Utility.hideKeyBordActivity(this)        super.onBackPressed()    }    private fun callAPIAirportData(flag: String?, toString: String) {        presenter.callAPIAirportData(flag, toString)    }    override fun getLayoutResource(): Int {        return R.layout.common_toolbar    }}