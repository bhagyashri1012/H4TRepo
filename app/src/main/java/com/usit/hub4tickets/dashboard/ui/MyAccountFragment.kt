package com.usit.hub4tickets.dashboard.uiimport android.content.Intentimport android.content.IntentFilterimport android.os.Bundleimport android.support.v4.content.LocalBroadcastManagerimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport com.usit.hub4tickets.Rimport com.usit.hub4tickets.account.ui.AccountInfoFragmentimport com.usit.hub4tickets.common.RootFragmentimport com.usit.hub4tickets.domain.presentation.presenters.ProfilePresenterimport com.usit.hub4tickets.domain.presentation.presenters.ProfilePresenter.MainView.ViewState.*import com.usit.hub4tickets.domain.presentation.screens.main.ProfilePresenterImplimport com.usit.hub4tickets.domain.presentation.screens.main.ProfileViewModelimport com.usit.hub4tickets.login.ui.LoginFragmentimport com.usit.hub4tickets.utils.Prefimport com.usit.hub4tickets.utils.PrefConstantsimport com.usit.hub4tickets.utils.Utilityimport com.usit.hub4tickets.utils.view.dialog.CustomDialogPresenterimport kotlinx.android.synthetic.main.fragment_myaccount.*import kotlinx.android.synthetic.main.fragment_myaccount.view.*import kotlinx.android.synthetic.main.fragment_settings_panel.*import android.widget.Toastimport android.content.BroadcastReceiverimport android.content.Contextclass MyAccountFragment : RootFragment(), ProfilePresenter.MainView {    private lateinit var model: ProfileViewModel    private lateinit var presenter: ProfilePresenter    override fun doRetrieveProfileModel(): ProfileViewModel = this.model    override fun showState(viewState: ProfilePresenter.MainView.ViewState) {        when (viewState) {            IDLE -> Utility.showProgress(false, context)            LOADING -> Utility.showProgress(true, context)            SUCCESS -> autoFillFields()            SETTING_DATA_SUCCESS -> autoFillFieldsFromSettingsData()            ERROR            -> {                showState(IDLE)                /*Utility.showCustomDialog(                    context,                    doRetrieveProfileModel().errorMessage,                    "",                    null                )*/            }        }    }    override fun setUserVisibleHint(isVisibleToUser: Boolean) {        super.setUserVisibleHint(isVisibleToUser)        Log.d("visible","user")    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        init()        view.link_login.setOnClickListener {            loginScreen()        }        view.link_my_alerts.setOnClickListener {            val intent = Intent(context, AlertsActivity::class.java)            startActivity(intent)        }        view.link_my_history.setOnClickListener {            val intent = Intent(context, AlertsActivity::class.java)            startActivity(intent)        }        view.link_clear_history.setOnClickListener {            val intent = Intent(context, AlertsActivity::class.java)            startActivity(intent)        }        if (Pref.getValue(context, PrefConstants.IS_LOGIN, false)) {            rl_my_acc_info.visibility = View.VISIBLE            link_login.isClickable = false        } else {            link_login.visibility = View.VISIBLE            link_login.text = "Log In"            link_login.isClickable = true            rl_my_acc_info.visibility = View.GONE            link_log_out.visibility = View.GONE        }        link_account_info.setOnClickListener {            initScreen()        }        link_log_out.setOnClickListener { logoutClearData() }    }    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        // Inflate the layout for this fragment        LocalBroadcastManager.getInstance(activity!!).registerReceiver(myBroadcastReceiver,             IntentFilter("thisIsForMyFragment")        )        return inflater.inflate(R.layout.fragment_myaccount, container, false)    }    private val myBroadcastReceiver = object : BroadcastReceiver() {        override fun onReceive(context: Context, intent: android.content.Intent) {            //Toast.makeText(activity, "Broadcast received!", Toast.LENGTH_SHORT)              //  .show()//Do what you want when the broadcast is received...            init()        }    }    private fun autoFillFieldsFromSettingsData() {        tv_country_name.text = model.settingsDomain.responseData?.countryName        tv_lang_name.text = model.settingsDomain.responseData?.languageName        tv_currency_name.text = model.settingsDomain.responseData?.currencyName        Pref.setValue(context, PrefConstants.CURRENCY_DEFAULT, tv_currency_name.text.toString())        showState(IDLE)    }    private fun autoFillFields() {        tv_country_name.text = model.profileDomain.responseData?.sqUserdetails?.countryName        tv_lang_name.text = model.profileDomain.responseData?.sqUserdetails?.languageName        tv_currency_name.text = model.profileDomain.responseData?.sqUserdetails?.currencyName        Pref.setValue(context, PrefConstants.CURRENCY_DEFAULT, tv_currency_name.text.toString())        Pref.setValue(context, PrefConstants.EMAIL_ID, model.profileDomain.responseData?.email.toString())        link_login.text = Pref.getValue(context, PrefConstants.EMAIL_ID, "")        if (link_login.text == "null")            link_login.text = " "        showState(IDLE)    }    private var accountMainFrag: AccountInfoFragment? = null    private fun initScreen() {        accountMainFrag = AccountInfoFragment()        val fragmentManager = activity?.supportFragmentManager        fragmentManager?.beginTransaction()?.replace(R.id.container_account_info, accountMainFrag!!)            ?.addToBackStack("AccountInfo")?.commit()    }    private var loginFrag: LoginFragment? = null    private fun loginScreen() {        loginFrag = LoginFragment()        fragmentManager?.beginTransaction()?.replace(R.id.container_account_info, loginFrag!!)            ?.addToBackStack("LoginFragment")?.commit()    }    private fun init() {        this.model = ProfileViewModel(context)        this.presenter = ProfilePresenterImpl(this, context!!)        if (Pref.getValue(context, PrefConstants.IS_LOGIN, false)) {            if (null == model.profileDomain.responseData)                presenter.callAPIGetProfile(Pref.getValue(context, PrefConstants.USER_ID, "0").toString())        } else {            var location = ""            var lang = ""            if ((activity as DashboardActivity).checkPermissions() && !Pref.getValue(                    context,                    PrefConstants.IS_FIRST_TIME_ALLOW,                    false                )            ) {                tv_country_name.text =                    Pref.getValue(context, PrefConstants.DEFAULT_LOCATION, "United Kingdom")!!                tv_currency_name.text = Pref.getValue(context, PrefConstants.CURRENCY_DEFAULT, "GBP")!!                tv_lang_name.text="English"            } else {                if (Pref.getValue(context, PrefConstants.COUNTRY_ID, "").equals(""))                    location = Pref.getValue(context, PrefConstants.DEFAULT_LOCATION, "")!!                else                    location = Pref.getValue(context, PrefConstants.COUNTRY, "").toString()                if (Pref.getValue(context, PrefConstants.CURRENCY_ID, "").equals(""))                    lang = Pref.getValue(context, PrefConstants.CURRENCY_DEFAULT, "")!!                else                    lang = Pref.getValue(context, PrefConstants.CURRENCY, "").toString()                presenter.callAPIGetSettingsData(                    Pref.getValue(context, PrefConstants.USER_ID, "0").toString(),                    location,                    lang                )            }        }    }    companion object {        @JvmStatic        fun newInstance(): MyAccountFragment {            return MyAccountFragment()        }    }    fun logoutClearData() {        CustomDialogPresenter.showDialog(            this.context!!,            "",            getString(R.string.log_out_messege),            context?.resources!!.getString(                R.string.no            ),            getString(R.string.yes),            object : CustomDialogPresenter.CustomDialogView {                override fun onPositiveButtonClicked() {                }                override fun onNegativeButtonClicked() {                    Pref.setValue(context, PrefConstants.IS_LOGIN, false)                    Pref.setValue(context, PrefConstants.USER_ID, "0")                    Pref.setValue(context, PrefConstants.EMAIL_ID, "")                    val ft = fragmentManager!!.beginTransaction()                    ft.detach(this@MyAccountFragment).attach(this@MyAccountFragment).commit()                }            })    }    override fun onBackPressed(): Boolean {        if (fragmentManager?.getBackStackEntryAt(0)?.name.equals("SignUpFragment"))            return super.onBackPressed()        else if (fragmentManager?.backStackEntryCount == 0)            return fragmentManager?.popBackStackImmediate()!!        else            return super.onBackPressed()    }    override fun onDestroyView() {        super.onDestroyView()        LocalBroadcastManager.getInstance(activity!!).unregisterReceiver(myBroadcastReceiver)    }}