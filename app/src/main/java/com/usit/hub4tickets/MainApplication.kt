package com.usit.hub4ticketsimport android.app.Applicationimport android.content.Contextimport android.net.ConnectivityManagerimport android.support.multidex.MultiDeximport android.support.v7.app.AppCompatDelegateimport android.util.Logimport com.crashlytics.android.Crashlyticsimport com.usit.hub4tickets.utils.Utilityimport io.fabric.sdk.android.Fabric/** * Created by Bhagyashri Burade * Date: 24/10/2018 * Email: bhagyashri.burade@usit.net.in */open class MainApplication : Application() {    var connected: Boolean = false    companion object {        private var instance: MainApplication? = null        /**         * singleton class instance         */        val getInstance: MainApplication            get() {                if (instance == null) {                    synchronized(MainApplication::class.java) {                        if (instance == null) {                            instance = MainApplication()                        }                    }                }                return instance!!            }    }    override fun onCreate() {        super.onCreate()        instance = this        AppCompatDelegate.setCompatVectorFromResourcesEnabled(true)        Fabric.with(this, Crashlytics())        // Log the onCreate event, this will also be printed in logcat        Crashlytics.log(Log.VERBOSE, TAG, "onCreate")        // Report a non-fatal exception, for demonstration purposes        Crashlytics.logException(Exception("Non-fatal exception: something went wrong!"))        // Log that crash button was clicked.        Crashlytics.log(Log.INFO, TAG, "Crash button clicked.")    }    fun isConnected(): Boolean {        val cm = applicationContext            .getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager        val activeNetwork = cm.activeNetworkInfo        connected = activeNetwork != null && activeNetwork.isConnected        return connected    }    private val TAG = Utility::class.java.name    override fun attachBaseContext(base: Context) {        super.attachBaseContext(base)        MultiDex.install(this@MainApplication)    }}