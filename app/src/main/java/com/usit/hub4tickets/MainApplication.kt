package com.usit.hub4ticketsimport android.app.Applicationimport android.content.Contextimport android.net.ConnectivityManagerimport android.net.NetworkInfoimport android.os.Buildimport android.support.multidex.MultiDeximport android.support.v7.app.AppCompatDelegateimport android.util.Logimport com.usit.hub4tickets.utils.Utility/** * Created by Bhagyashri Burade * Date: 24/10/2018 * Email: bhagyashri.burade@usit.net.in */open class MainApplication : Application() {    var connected: Boolean = false    companion object {        private var instance: MainApplication? = null        /**         * singleton class instance         */        val getInstance: MainApplication            get() {                if (instance == null) {                    synchronized(MainApplication::class.java) {                        if (instance == null) {                            instance = MainApplication()                        }                    }                }                return instance!!            }    }    override fun onCreate() {        super.onCreate()        instance = this        AppCompatDelegate.setCompatVectorFromResourcesEnabled(true)    }    fun isConnected(): Boolean {        /*val cm = applicationContext            .getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager        val activeNetwork = cm.activeNetworkInfo        connected = activeNetwork != null && activeNetwork.isConnected        return connected*/        /* val wifiMgr = getSystemService(Context.WIFI_SERVICE) as WifiManager         if (wifiMgr.isWifiEnabled) { // Wi-Fi adapter is ON             val wifiInfo = wifiMgr.connectionInfo             return if (wifiInfo.networkId == -1) {                 false // Not connected to an access point             } else true // Connected to an access point         } else {             return false // Wi-Fi adapter is OFF         }*/        val cm = applicationContext            .getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager        val activeNetwork = cm.activeNetworkInfo        connected = activeNetwork != null && activeNetwork.isConnected        return connected    }    private val TAG = Utility::class.java.name    override fun attachBaseContext(base: Context) {        super.attachBaseContext(base)        MultiDex.install(this@MainApplication)    }}